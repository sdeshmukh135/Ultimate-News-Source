// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  interactions UserInteraction[] // user interactions per article (signals)
  userNews UserNewsCache[]
}

model UserInteraction {
  id       Int    @id @default(autoincrement())
  openCount Int
  isLiked Boolean // to read later
  readCount Int // clicked on "view article"
  newsId Int
  voted Boolean? // update when the userNewsCache is updated
  news News? @relation(fields : [newsId], references : [id]) 
  userId Int
  user User? @relation(fields : [userId], references : [id])
}

model UserNewsCache {
  id       Int    @id @default(autoincrement())
  userId Int
  user User? @relation(fields : [userId], references : [id])
  newsId Int
  news News? @relation(fields : [newsId], references : [id]) 
  bookmarked Boolean
  score Float // engagement score
  addedTime DateTime
  addTagInput Boolean // whether the user added their input for this specific article
}

model Stock {
  id       Int    @id @default(autoincrement())
  date String
  lastUpdated String
  name String
  low String
  diffPercent String
  isPositive Boolean
}

model News {
 id       Int    @id @default(autoincrement())
 name String
 releaseDate String?
 category String[]
 articleURL String
 imageURL String?
 releasedAt DateTime
 leftCount Int?
 rightCount Int?
 sentiment Json?
 interactions UserInteraction[]
 userNewsCache UserNewsCache[]
 globalInteractions GlobalInteraction[]
}

model GlobalInteraction { // aggregated engagement signals per news across users
  id       Int    @id @default(autoincrement())
  openCount Int
  readCount Int
  likedCount Int
  publishedDayOfWeek Int
  publishedTime Int // just the hour for now
  newsId Int
  score Float // engagement score
  news News @relation(fields : [newsId], references : [id]) 
}

model EngagementWeight { // makes weights dynamic and flexible
  id       Int    @id @default(autoincrement())
  signal String
  weight Int
  updatedLast DateTime @default(now()) // just in case we need to update the weights
}

model Feature {
  id       Int    @id @default(autoincrement())
  featuredNews Json 
}